// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("categoryid")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("publisherid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("categoryid");

                    b.HasIndex("publisherid");

                    b.ToTable("books");
                });

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("WebApplication1.Models.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("WebApplication1.Models.Delivery", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("booksCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("deliveryDate")
                        .HasColumnType("Date");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.ToTable("deliveries");
                });

            modelBuilder.Entity("WebApplication1.Models.PriceChange", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("newPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("priceChanged")
                        .HasColumnType("Date");

                    b.HasKey("id");

                    b.ToTable("priceChanges");
                });

            modelBuilder.Entity("WebApplication1.Models.Publisher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("WebApplication1.Models.Purchase", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("customerid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("purchaseDate")
                        .HasColumnType("Date");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.ToTable("purchases");
                });

            modelBuilder.Entity("WebApplication1.Models.PurchaseItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("booksCount")
                        .HasColumnType("integer");

                    b.Property<int>("priceid")
                        .HasColumnType("integer");

                    b.Property<int>("purchaseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("priceid");

                    b.HasIndex("purchaseid");

                    b.ToTable("purchaseItems");
                });

            modelBuilder.Entity("WebApplication1.Models.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("WebApplication1.Models.RoleUser", b =>
                {
                    b.Property<int>("rolesid")
                        .HasColumnType("integer");

                    b.Property<int>("usersid")
                        .HasColumnType("integer");

                    b.HasKey("rolesid", "usersid");

                    b.HasIndex("usersid");

                    b.ToTable("roleUsers");
                });

            modelBuilder.Entity("WebApplication1.Models.Store", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("integer");

                    b.Property<int>("booksCount")
                        .HasColumnType("integer");

                    b.Property<int>("priceid")
                        .HasColumnType("integer");

                    b.HasKey("bookId");

                    b.HasIndex("priceid");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.HasOne("WebApplication1.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Publisher", "publisher")
                        .WithMany()
                        .HasForeignKey("publisherid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("publisher");
                });

            modelBuilder.Entity("WebApplication1.Models.Delivery", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");
                });

            modelBuilder.Entity("WebApplication1.Models.Purchase", b =>
                {
                    b.HasOne("WebApplication1.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("WebApplication1.Models.PurchaseItem", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.PriceChange", "price")
                        .WithMany()
                        .HasForeignKey("priceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Purchase", "purchase")
                        .WithMany()
                        .HasForeignKey("purchaseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("price");

                    b.Navigation("purchase");
                });

            modelBuilder.Entity("WebApplication1.Models.RoleUser", b =>
                {
                    b.HasOne("WebApplication1.Models.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("rolesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "user")
                        .WithMany("rolesUsers")
                        .HasForeignKey("usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WebApplication1.Models.Store", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.PriceChange", "price")
                        .WithMany()
                        .HasForeignKey("priceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("price");
                });

            modelBuilder.Entity("WebApplication1.Models.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("rolesUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
